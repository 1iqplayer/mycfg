1. Hello World
docker run hello-world
run â†’ create and start a container.
No extra flags needed here. It just prints a test message and exits.
---
2. Alpine Linux
docker run -it --rm alpine sh
-i â†’ interactive (keeps STDIN open).
-t â†’ allocate a pseudo-TTY (gives you a proper shell).
--rm â†’ remove container automatically when it exits (good for testing).
alpine â†’ the image name.
sh â†’ command to run inside (shell).
ðŸ‘‰ You now have a tiny Linux shell to play with.
---
3. Nginx Web Server
docker run -d -p 8080:80 --name mynginx nginx
-d â†’ detached mode (runs in background).
-p 8080:80 â†’ maps local port 8080 â†’ container port 80.
--name mynginx â†’ gives the container a custom name (instead of random).
nginx â†’ the image.
ðŸ‘‰ Visit http://localhost:8080 to see it running.
---
4. Redis (in-memory database)
docker run -d -p 6379:6379 --name myredis redis
-d â†’ detached, runs in background.
-p 6379:6379 â†’ maps Redis default port.
--name myredis â†’ easy to reference by name.
ðŸ‘‰ To connect:
docker exec -it myredis redis-cli
exec â†’ run a command inside a running container.
-it â†’ interactive terminal.
---
5. Portainer (Docker GUI)
docker run -d -p 9000:9000 --name portainer \
--restart=always \
-v /var/run/docker.sock:/var/run/docker.sock \
-v portainer_data:/data \
portainer/portainer-ce
--restart=always â†’ restart container if it crashes or system reboots.
-v /var/run/docker.sock:/var/run/docker.sock â†’ lets Portainer talk to Docker engine.
-v portainer_data:/data â†’ named volume for persistent data.
portainer/portainer-ce â†’ image.
ðŸ‘‰ Visit http://localhost:9000
---
âš¡ Other Useful Flags (Super Handy)
--rm â†’ auto-remove container after it exits (good for temporary stuff).
--name <name> â†’ give the container a nice name.
-v hostpath:containerpath â†’ mount volumes (host â†” container storage).
-e KEY=value â†’ set environment variables (used in apps & databases).
--network <net> â†’ attach to a custom Docker network.
--restart=always â†’ auto-restart on crash or reboot.
-it â†’ for interactive containers (shells, REPLs).
-d â†’ detached background mode.
docker container ls -a -> ls even sxited containers
ðŸ‘‰ Suggested Learning Path:
1. Use alpine with -it --rm.
2. Run nginx with -d -p --name.
3. Add volumes (-v) to persist data.
4. Try environment variables with something like mysql or postgres.
5. Play with networks by linking two containers (e.g., app â†” db).
